syntax = "proto3";


//import "google/protobuf/Empty.proto";

//Asset Definition
enum Machine {
    PHYSICAL = 0;
    VIRTUAL = 1;
    CONTAINER = 2;
    SERVERLESS = 3;
}

enum Event_Type {
    ASSET = 0;
    WORKFLOW = 1;
    THREAT = 2;
    MITIGATION = 3;
}

enum Datastore_Type {
    UNKNOWN = 0;
    FILE_SYSTEM = 1;
    SQL = 2;
    LDAP = 3;
    BUCKET = 4;
    OTHER = 5;
    NOSQL = 6;
}

//Update to include other failure options
enum Status_Code {
    SUCCESS = 0;
    FAILURE = 1;
}

message Status {
    Status_Code code = 1;
}

message Empty {

}

message SuggestedAsset{

    ACTOR = 0
    SERVER = 1
    DATASTORE = 2
    LAMBDA = 3
    PROCESS = 4
    EXTERNAL_ENTITY = 5

}

message Event {
    //Event_Type event_type = 1;
    SuggestedAsset event_element = 1
    bool changed = 2
}

message Threat {
    string name = 1;
    string threat_type = 2;
    //add things from DSL
}

message GetSuggestionsResponse {
    repeated Threat threats = 1;
}

message Actor {
    string name = 1;
    string actor_type = 2;
    bool physical_access = 3;
}

message GetActorsResponses {
    Actor actor = 1;
}

message RemoveActorRequest {
    string name = 1;
}

message Boundary {
    string name = 1;
    Actor boundary_owner = 2;
}

message RemoveBoundaryRequest {
    string name = 1;
}

message GetBoundariesResponses {
    repeated Boundary trust_boundary = 1;
}

message AddAssetRequest {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
}

message RemoveAssetRequest {
    string name = 1;
}

message AssetResponse {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
}

message GetAssetsResponses {
    repeated AssetResponse asset = 1;
}

message AddExternalAssetRequest {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
    bool physical_access = 5;
}

message RemoveExternalAssetRequest {
    string name = 1;
}

message ExternalAssetResponse {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
    bool physical_access = 5;
}

message GetExternalAssetsResponses {
    repeated ExternalAssetResponse asset = 1;
}

message AddDatastoreRequest {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
    Datastore_Type ds_type = 5;
}

message RemoveDatastoreRequest {
    string name = 1;
}

message DatastoreResponse {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
    Datastore_Type ds_type = 5;
}

message GetDatastoreResponses {
    repeated DatastoreResponse datastore = 1;
}

message AddProcessRequest {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
}

message RemoveProcessRequest {
    string name = 1;
}

message ProcessResponse {
    string name = 1;
    repeated int32 open_port = 2;
    repeated Boundary trust_boundary = 3;
    Machine machine = 4;
}

message GetProcessResponses {
    repeated ProcessResponse process = 1;
}

message ExportRequest {
    string output_file = 1;
}

message ImportRequest {
    string input_file = 1;
}

service Controller {

    rpc Import (ImportRequest) returns (Status);
    rpc Export (ExportRequest) returns (Status);

    rpc AddAsset (AddAssetRequest) returns (Status);
    rpc RemoveAsset (RemoveAssetRequest) returns (Status);
    rpc GetAssets (Empty) returns (GetAssetsResponses);

    rpc AddExternalAsset (AddExternalAssetRequest) returns (Status);
    rpc RemoveExternalAsset (RemoveExternalAssetRequest) returns (Status);
    rpc GetExternalAssets (Empty) returns (GetExternalAssetsResponses);

    rpc AddDatastore (AddDatastoreRequest) returns (Status);
    rpc RemoveDatastore (RemoveDatastoreRequest) returns (Status);
    rpc GetDatastores (Empty) returns (GetDatastoreResponses);

    rpc AddProcess (AddProcessRequest) returns (Status);
    rpc RemoveProcess (RemoveProcessRequest) returns (Status);
    rpc GetProcesses (Empty) returns (GetProcessResponses);

    rpc AddBoundary (Boundary) returns (Status);
    rpc RemoveBoundary (RemoveBoundaryRequest) returns (Status);
    rpc GetBoundaries (Empty) returns (GetBoundariesResponses);

    rpc AddActor (Actor) returns (Status);
    rpc RemoveActor (RemoveActorRequest) returns (Status);
    rpc GetActors (Empty) returns (GetActorsResponses);

    //rpc NewEvent (Event) returns (Status);

    rpc GetSuggestions (Event) returns (GetSuggestionsResponse);
}
